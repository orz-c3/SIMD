#include <pmmintrin.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#include <smmintrin.h>
#include <tmmintrin.h>
#include <nmmintrin.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <immintrin.h> 
#include <windows.h>
//#include <sys/time.h>
using namespace std;


const int lie = 37960;
const int mat = 14921;

const int Num =  1+lie/32;
unsigned int act[lie][Num+1] = { 0 };
unsigned int mat[lie][Num+1] = { 0 };


void init_A()
{
    
    unsigned int a;
    ifstream infile("2.txt");
    char fin[100] = { 0 };
    int index;
    while (infile.getline(fin, sizeof(fin)))
    {
        std::stringstream line(fin);
        int symb = 0;

        while (line >> a)
        {
            if (symb == 0)
            {
                index = a;
                symb = 1;
            }
            int k = a % 32;
            int j = a / 32;

            int temp = 1 << k;
            act[index][Num - 1 - j] += temp;
            act[index][Num] = 1;
        }
    }
}

void init_P()
{
    unsigned int a;
    ifstream infile("1.txt");
    char fin[100] = { 0 };
    int index = 0;
    while (infile.getline(fin, sizeof(fin)))
    {
        std::stringstream line(fin);
        int symb = 0;

        while (line >> a)
        {
            if (symb == 0)
            {
                mat[index][Num] = a;
                symb = 1;
            }

            int k = a % 32;
            int j = a / 32;

            int temp = 1 << k;
            mat[index][Num - 1 - j] += temp;
        }
        index++;
    }
}





void f_ordinary()
{
    int i;
    for (i = lie - 1; i - 8 >= -1; i -= 8)
    {
        for (int j = 0; j < mat; j++)
        {

            while (mat[j][Num] <= i && mat[j][Num] >= i - 7)
            {
                int index = mat[j][Num];
                if (act[index][Num] == 1)
                {
                    for (int k = 0; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[index][k];
                    }


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }

            }
        }
    }

    for (i = i + 8; i >= 0; i--)
    {

        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] == i)
            {
                if (act[i][Num] == 1)
                {
                    for (int k = 0; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[i][k];
                    }

                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }
}



__m128 va_mat;
__m128 va_act;


void f_sse()
{
    int i;
    for (i = lie - 1; i - 8 >= -1; i -= 8)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] <= i && mat[j][Num] >= i - 7)
            {
                int index = mat[j][Num];
                if (act[index][Num] == 1)
                {

                    int k;
                    for (k = 0; k + 4 <= Num; k += 4)
                    {
                        
                        va_mat = _mm_loadu_ps((float*)&(mat[j][k]));
                        va_act = _mm_loadu_ps((float*)&(act[index][k]));

                        va_mat = _mm_xor_ps(va_mat, va_act);
                        _mm_store_ss((float*)&(mat[j][k]), va_mat);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[index][k];
                    }


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }


    for (i = i + 8; i >= 0; i--)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] == i)
            {
                if (act[i][Num] == 1)
                {

                    int k;
                    for (k = 0; k + 4 <= Num; k += 4)
                    {
                        va_mat = _mm_loadu_ps((float*)&(mat[j][k]));
                        va_act = _mm_loadu_ps((float*)&(act[i][k]));
                        va_mat = _mm_xor_ps(va_mat, va_act);
                        _mm_store_ss((float*)&(mat[j][k]), va_mat);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[i][k];
                    }
                    


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }

}


__m256 va_mat2;
__m256 va_act2;

void f_avx256()
{
    int i;
    for (i = lie - 1; i - 8 >= -1; i -= 8)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] <= i && mat[j][Num] >= i - 7)
            {
                int index = mat[j][Num];
                if (act[index][Num] == 1)
                {


                    int k;
                    for (k = 0; k + 8 <= Num; k += 8)
                    {
                        
                        va_mat2 = _mm256_loadu_ps((float*)&(mat[j][k]));
                        va_act2 = _mm256_loadu_ps((float*)&(act[index][k]));

                        va_mat2 = _mm256_xor_ps(va_mat2, va_act2);
                        _mm256_storeu_ps((float*)&(mat[j][k]), va_mat2);


                        va_mat2 = _mm256_loadu_ps((float*)&(mat[j][k+4]));
                        va_act2 = _mm256_loadu_ps((float*)&(act[index][kâ€”+4]));

                        va_mat2 = _mm256_xor_ps(va_mat2, va_act2);
                        _mm256_storeu_ps((float*)&(mat[j][k+4]), va_mat2);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[index][k];
                    }
                   


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }


    for (i = i + 8; i >= 0; i--)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] == i)
            {
                if (act[i][Num] == 1)
                {

                    int k;
                    for (k = 0; k + 8 <= Num; k += 8)
                    {
                        //mat[j][k] = mat[j][k] ^ act[i][k];
                        va_mat2 = _mm256_loadu_ps((float*)&(mat[j][k]));
                        va_act2 = _mm256_loadu_ps((float*)&(act[i][k]));
                        va_mat2 = _mm256_xor_ps(va_mat2, va_act2);
                        _mm256_storeu_ps((float*)&(mat[j][k]), va_mat2);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[i][k];
                    }
                    


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }
}


__m512 va_mat3;
__m512 va_act3;

void f_avx512()
{
    int i;
    for (i = lie - 1; i - 8 >= -1; i -= 8)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] <= i && mat[j][Num] >= i - 7)
            {
                int index = mat[j][Num];
                if (act[index][Num] == 1)
                {

                    
                    int k;
                    for (k = 0; k + 16 <= Num; k += 16)
                    {
                        
                        va_mat3 = _mm512_loadu_ps((float*)&(mat[j][k]));
                        va_act3 = _mm512_loadu_ps((float*)&(act[index][k]));

                        va_mat3 = _mm512_xor_ps(va_mat3, va_act3);
                        _mm512_storeu_ps((float*)&(mat[j][k]), va_mat3);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[index][k];
                    }
                    


                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }


    for (i = i + 8; i >= 0; i--)
    {
        for (int j = 0; j < mat; j++)
        {
            while (mat[j][Num] == i)
            {
                if (act[i][Num] == 1)
                {

                    
                    int k;
                    for (k = 0; k + 16 <= Num; k += 16)
                    {
                        //mat[j][k] = mat[j][k] ^ act[i][k];
                        va_mat3 = _mm512_loadu_ps((float*)&(mat[j][k]));
                        va_act3 = _mm512_loadu_ps((float*)&(act[i][k]));
                        va_mat3 = _mm512_xor_ps(va_mat3, va_act3);
                        _mm512_storeu_ps((float*)&(mat[j][k]), va_mat3);
                    }

                    for (; k < Num; k++)
                    {
                        mat[j][k] = mat[j][k] ^ act[i][k];
                    }
                    



                    int num = 0, S_num = 0;
                    for (num = 0; num < Num; num++)
                    {
                        if (mat[j][num] != 0)
                        {
                            unsigned int temp = mat[j][num];
                            if (temp != 0) {
                            unsigned long index;
                            _BitScanForward(&index, temp);
                            S_num = index + num * 32;
                            break;
                        }
                        }
                    }
                    mat[j][Num] = S_num - 1;

                }
                else
                {
                    memcpy(act[index], mat[j], Num * sizeof(mat[0][0]));
                    act[index][Num] = 1;
                }
            }
        }
    }
}






int main()
{

    init_A();
    init_P();
    double seconds;
    long long head, tail, freq, noww;
    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);


    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    f_ordinary();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
    seconds = (tail - head) * 1000.0 / freq;
    cout <<"f_ordinary:"<< seconds << 'ms'<<endl;

    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    f_sse();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
    seconds = (tail - head) * 1000.0 / freq;
    cout <<"f_sse:"<< seconds << 'ms'<<endl;

    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    //f_ordinary();
    f_avx256();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
    seconds = (tail - head) * 1000.0 / freq;
    cout <<"f_avx256:"<< seconds << 'ms'<<endl;
    

}

